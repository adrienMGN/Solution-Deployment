name: Simple Container Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-containers:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create secrets
      run: |
        mkdir -p secrets
        echo "admin" > secrets/mongo_root_user.txt
        echo "password123" > secrets/mongo_root_password.txt
        echo "audiouser" > secrets/mongo_user.txt
        echo "audiopass123" > secrets/mongo_user_password.txt

    - name: Create mongo-init.js
      run: |
        cat > mongo-init.js << 'EOF'
        db = db.getSiblingDB('audiorecorder');
        db.createUser({
          user: 'audiouser',
          pwd: 'audiopass123',
          roles: [{ role: 'readWrite', db: 'audiorecorder' }]
        });
        EOF

    - name: Start containers
      run: docker-compose up -d --build

    - name: Wait for containers
      run: sleep 30

    - name: Check container status
      run: |
        echo "=== Container Status ==="
        docker-compose ps
        
        echo "=== Checking MongoDB (port 27017) ==="
        curl -v telnet://localhost:27017 || nc -zv localhost 27017
        
        echo "=== Checking Mongo Express (port 8081) ==="
        curl -f http://localhost:8081 || echo "Mongo Express not ready"
        
        echo "=== Checking Audio Recorder (port 3000) ==="
        curl -f http://localhost:3000/health || curl -f http://localhost:3000 || echo "Audio Recorder not responding"

    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== MongoDB logs ==="
        docker logs audiorecorder-mongodb
        echo "=== Audio Recorder logs ==="
        docker logs audio-recorder-app
        echo "=== Mongo Express logs ==="
        docker logs audiorecorder-mongo-express

    - name: Cleanup
      if: always()
      run: docker-compose down -v
